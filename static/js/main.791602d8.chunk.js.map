{"version":3,"sources":["components/PageContainer/index.tsx","api/request.ts","api/getCities.ts","containers/HomeContainer/TextHeader.tsx","components/AutoComplete/index.tsx","containers/HomeContainer/SearchAndDisplay/index.tsx","containers/HomeContainer/index.tsx","pages/Home/index.tsx","App.tsx","theme/index.ts","components/ErrorBoundary/index.tsx","index.tsx"],"names":["PageContainer","children","direction","position","minHeight","bgGradient","align","with","paddingTop","paddingLeft","paddingRight","paddingBottom","api","axios","create","baseURL","process","request","method","url","params","getCities","a","then","response","data","catch","error","errorMsg","message","meta","results","TextHeader","Props","textStyle","id","AutoComplete","label","placeholder","itemsList","handleSelectedItemsChange","selectedItems","useState","pickerItems","items","disableCreateItem","onSelectedItemsChange","changes","hideToggleButton","renderCustomInput","inputProps","rounded","pointerEvents","color","SearchAnDisplay","setSelectedItems","HomeContainer","allCitiesData","setAllCitiesData","setError","loading","setLoading","cityList","setCityList","useEffect","allData","cityArray","map","city","cityObj","value","push","cities","console","log","width","height","textAlign","fontSize","length","Home","App","extendTheme","styles","global","overflowX","scrollBehavior","textStyles","h1","lineHeight","fontWeight","h2","letterSpacing","fonts","heading","body","colors","primary","space","config","cssVarPrefix","initialColorMode","useSystemColorMode","ErrorBoundary","state","hasError","errorInfo","this","props","_","Component","ReactDOM","render","StrictMode","theme","document","getElementById"],"mappings":"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","file":"static/js/main.791602d8.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { Flex, Box } from '@chakra-ui/react';\n\ninterface Props {\n  children: JSX.Element;\n}\n\nconst PageContainer: FC<Props> = ({ children }: Props) => {\n  return (\n    <>\n      <Flex\n        direction=\"column\"\n        position=\"relative\"\n        minHeight=\"100vh\"\n        bgGradient=\"linear(to-r,  #6a0dad, #0da2ff)\"\n        align=\"center\"\n      >\n        <Box\n          with=\"100%\"\n          paddingTop=\"60px\"\n          paddingLeft=\"20px\"\n          paddingRight=\"20px\"\n          paddingBottom=\"30px\"\n        >\n          {children}\n        </Box>\n      </Flex>\n    </>\n  );\n};\n\nexport default PageContainer;\n","import axios, { Method, AxiosResponse } from 'axios';\n\nconst api = axios.create({ baseURL: process.env.REACT_APP_BASE_API });\n\nconst request = <T>(\n  method: Method,\n  url: string,\n  params: any\n): Promise<AxiosResponse<T>> => {\n  return api.request<T>({\n    method,\n    url,\n    params,\n  });\n};\n\nexport default request;\n","import request from './request';\nimport { AllCities, Error } from '../types/Cities';\n\n\nconst getCities = async (): Promise<AllCities | Error | undefined> => {\n  const cityURL: string =\n    '/v2/cities?limit=100&page=1&offset=0&sort=asc&country_id=GB&order_by=city';\n\n  return await request('GET', cityURL, {})\n    .then((response) => {\n      return response.data as AllCities;\n    })\n    .catch((error) => {\n      if (error) {\n        return {error: true, errorMsg: error.message, meta: null, results: null} as Error;\n      }\n    });\n};\n\nexport default getCities;\n","import React, { FC } from 'react';\nimport { Text, Box } from '@chakra-ui/react';\ninterface Props {}\n\nconst TextHeader: FC<Props> = (Props) => {\n  return (\n    <>\n      <Text textStyle=\"h1\">Compare your Air</Text>\n      <Text paddingTop=\"40px\" id=\"header\" paddingBottom=\"5px\">\n        Compare the air quality between cities in the UK.\n      </Text>\n      <Text>Select cities to compare using the search tool below.</Text>\n    </>\n  );\n};\n\nexport default TextHeader;\n","import React, { FC, useState } from 'react';\nimport { CUIAutoComplete } from 'chakra-ui-autocomplete';\nimport { City } from '../../types/City';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport { InputGroup, InputLeftElement, Input } from '@chakra-ui/react';\n\nexport interface Props {\n  label: string;\n  placeholder: string;\n  itemsList: City[];\n  selectedItems: City[];\n  handleSelectedItemsChange(selectedItems?: City[]): any;\n}\n\nconst AutoComplete: FC<Props> = ({\n  label,\n  placeholder,\n  itemsList,\n  handleSelectedItemsChange,\n  selectedItems,\n}) => {\n  const [pickerItems, setPickerItems] = useState(itemsList);\n\n  return (\n    <CUIAutoComplete\n      label={''}\n      placeholder={placeholder}\n      items={pickerItems}\n      disableCreateItem={true}\n      selectedItems={selectedItems}\n      onSelectedItemsChange={(changes) =>\n        handleSelectedItemsChange(changes.selectedItems)\n      }\n      hideToggleButton={true}\n      renderCustomInput={(inputProps) => (\n        <InputGroup rounded=\"md\">\n          <InputLeftElement\n            pointerEvents=\"none\"\n            children={<SearchIcon color=\"gray.300\" />}\n          />\n          <Input {...inputProps} color=\"#ffffff\" />\n        </InputGroup>\n      )}\n    />\n  );\n};\n\nexport default AutoComplete;\n","import React, { FC, useState } from 'react';\nimport AutoComplete from '../../../components/AutoComplete';\nimport { City } from '../../../types/City';\n\nexport interface Props {\n  label: string;\n  placeholder: string;\n  itemsList: City[];\n}\n\nconst SearchAnDisplay: FC<Props> = ({ label, placeholder, itemsList }) => {\n  const [selectedItems, setSelectedItems] = useState<City[]>([]);\n\n  const handleSelectedItemsChange = (selectedItems?: City[]) => {\n    if (selectedItems) {\n      setSelectedItems(selectedItems);\n    }\n  };\n\n  return (\n    <>\n      <AutoComplete\n        label={label}\n        placeholder={placeholder}\n        itemsList={itemsList}\n        handleSelectedItemsChange={handleSelectedItemsChange}\n        selectedItems={selectedItems}\n      />\n    </>\n  );\n};\n\nexport default SearchAnDisplay;\n","import React, { FC, useEffect, useState } from 'react';\nimport PageContainer from '../../components/PageContainer';\nimport {  Box, Spinner } from '@chakra-ui/react';\nimport { AllCities, Error, CitiesList } from '../../../src/types/Cities';\nimport { City } from '../../../src/types/City';\nimport getCities from '../../api/getCities';\nimport TextHeader from './TextHeader';\nimport SearchAndDisplay from './SearchAndDisplay'\nimport SearchAnDisplay from './SearchAndDisplay';\ninterface Props {}\n\nconst HomeContainer: FC<Props> = (Props) => {\n  const [allCitiesData, setAllCitiesData] = useState<Promise<\n    AllCities | Error | undefined | null\n  > | null>(null);\n  const [error, setError] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [cityList, setCityList] = useState<CitiesList | null>(null);\n\n  useEffect(() => {\n    if (!allCitiesData) {\n      setLoading(true);\n      const allData = getCities();\n      setAllCitiesData(allData);\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    allCitiesData?.then((response) => {\n      if (response!.results) {\n        const cityArray: City[] = [];\n        response!.results.map((city) => {\n          const cityObj = {\n            ...city,\n            label: city.city,\n            value: city.city,\n          };\n          cityArray.push(cityObj);\n        });\n        const cityUpdate: CitiesList = { cities: cityArray };\n        setCityList(cityUpdate);\n        console.log(response!.results);\n      }\n      if (response!.error) {\n        setError(true);\n      }\n    });\n  }, [allCitiesData]);\n\n  return (\n    <PageContainer>\n      <Box width=\"100%\" height=\"100%\" textAlign=\"center\">\n        <TextHeader />\n        <Box paddingTop=\"30px\" paddingBottom=\"30px\" color=\"#000000\" fontSize=\"16px\" width=\"100%\">\n          {loading ? (\n            <Spinner />\n          ) : (\n            <>\n              {cityList && cityList.cities.length > 0 && (\n                <SearchAnDisplay\n                  label=\"Search City\"\n                  placeholder=\"Type City name\"\n                  itemsList={cityList!.cities}\n                />\n              )}\n            </>\n          )}\n        </Box>\n      </Box>\n    </PageContainer>\n  );\n};\n\nexport default HomeContainer;\n","import React, { FC } from 'react';\nimport HomeContainer from '../../containers/HomeContainer';\ninterface Props {}\n\nconst Home: FC<Props> = (Props) => {\n  return <HomeContainer />;\n};\n\nexport default Home;\n","import React from 'react';\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <>\n      <Home />\n    </>\n  );\n}\n\nexport default App;\n","import { extendTheme } from '@chakra-ui/react';\n\nconst overrides = {\n  styles: {\n    global: () => ({\n      'html, body': {\n        overflowX: 'hidden',\n        fontSize: ['18px', '25px'],\n        scrollBehavior: 'smooth',\n        color: '#FFFFFF'\n      },\n    }),\n  },\n  textStyles: {\n    h1: {\n      fontSize: ['30px', '40px'],\n      lineHeight: '100%',\n      fontWeight:\"bold\"\n    },\n    h2: {\n      fontSize: ['36px', '48px'],\n      fontWeight: 'semibold',\n      lineHeight: '110%',\n      letterSpacing: '-1%',\n    },\n  },\n  fonts: {\n    heading: 'Open Sans',\n    body: 'Open Sans',\n  },\n  colors: {\n    primary: '#FFFFFF',\n  },\n  space: {},\n  config: {\n    cssVarPrefix: 'air-quality',\n    initialColorMode: 'light',\n    useSystemColorMode: false,\n  },\n};\nexport default extendTheme(overrides);\n","import React, { Component, ErrorInfo, ReactNode } from \"react\";\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false\n  };\n\n  public static getDerivedStateFromError(_: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"Uncaught error:\", error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return <h1>Sorry.. there was an error that was weird!</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport theme from './theme';\nimport '@fontsource/open-sans/400.css';\nimport ErrorBoundary from '../src/components/ErrorBoundary';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <ErrorBoundary>\n        <App />\n      </ErrorBoundary>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}