{"version":3,"sources":["components/PageContainer/index.tsx","api/request.ts","api/getCities.ts","containers/HomeContainer/TextHeader.tsx","components/AutoComplete/index.tsx","api/getAirQualityByCity.ts","components/AlertDisplay/index.tsx","components/CityAirQuality/DateSinceLastUpdate.tsx","components/CityAirQuality/AirQualityReadings.tsx","components/CityAirQuality/index.tsx","components/ResultsLayout/index.tsx","containers/HomeContainer/SearchAndDisplay/index.tsx","containers/HomeContainer/index.tsx","pages/Home/index.tsx","App.tsx","theme/index.ts","components/ErrorBoundary/index.tsx","index.tsx"],"names":["PageContainer","children","direction","position","minHeight","bgGradient","align","justifyContent","overflow","with","padding","api","axios","create","baseURL","process","request","method","url","params","getCities","a","then","response","data","catch","error","errorMsg","message","meta","results","TextHeader","Props","textStyle","paddingTop","id","paddingBottom","AutoComplete","label","placeholder","itemsList","handleSelectedItemsChange","selectedItems","React","useState","pickerItems","width","alignItems","color","items","disableCreateItem","onSelectedItemsChange","changes","hideToggleButton","renderCustomInput","inputProps","rounded","pointerEvents","borderColor","listStyleProps","getAirQualityByCity","cities","console","log","airValueURL","AlertDisplay","status","description","DateSinceLastUpdate","lastUpdated","newDate","Date","differenceString","moment","fromNow","textTransform","fontWeight","fontSize","AirQualityReadings","measurements","length","itemslist","map","item","i","arr","parameter","toUpperCase","value","mesurementsList","CityAirQuality","location","handleRemoveLocation","backgroundColor","textAlign","as","AiOutlineClose","cursor","onClick","paddingLeft","paddingRight","city","ResultsLayout","allLocations","setAllLocations","setError","loading","setLoading","resultsArray","filter","obj","useEffect","cityList","cityData","getLocationsByCity","allData","templateColumns","gap","SearchAndDisplay","setSelectedItems","HomeContainer","allCitiesData","setAllCitiesData","setCityList","getCityList","cityArray","cityObj","push","height","Home","App","extendTheme","styles","global","overflowX","scrollBehavior","textStyles","h1","lineHeight","h2","letterSpacing","fonts","heading","body","colors","primary","space","config","cssVarPrefix","initialColorMode","useSystemColorMode","ErrorBoundary","state","hasError","errorInfo","this","props","_","Component","ReactDOM","render","StrictMode","theme","document","getElementById"],"mappings":"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","file":"static/js/main.9c7160f2.chunk.js","sourcesContent":["import React from 'react';\nimport { Flex, Box } from '@chakra-ui/react';\n\ninterface Props {\n  children: JSX.Element;\n}\n\nconst PageContainer: React.FC<Props> = ({ children }: Props) => {\n  return (\n    <>\n      <Flex\n        direction=\"column\"\n        position=\"relative\"\n        minHeight=\"100vh\"\n        bgGradient=\"linear(to-r,  #6a0dad, #0da2ff)\"\n        align=\"center\"\n        justifyContent=\"center\"\n        overflow=\"auto\"\n      >\n        <Box with=\"100%\" padding=\"20px\">\n          {children}\n        </Box>\n      </Flex>\n    </>\n  );\n};\n\nexport default PageContainer;\n","import axios, { Method, AxiosResponse } from 'axios';\n\nconst api = axios.create({ baseURL: process.env.REACT_APP_BASE_API });\n\nconst request = <T>(\n  method: Method,\n  url: string,\n  params: any\n): Promise<AxiosResponse<T>> => {\n  return api.request<T>({\n    method,\n    url,\n    params,\n  });\n};\n\nexport default request;\n","import request from './request';\nimport { AllCities, Error } from '../types/Cities';\n\nconst getCities = async (): Promise<AllCities | Error | undefined> => {\n  const cityURL: string =\n    '/cities?limit=100&page=1&offset=0&sort=asc&country_id=GB&order_by=city';\n\n  return await request('GET', cityURL, {})\n    .then((response) => {\n      return response.data as AllCities;\n    })\n    .catch((error) => {\n      if (error) {\n        return {\n          error: true,\n          errorMsg: error.message,\n          meta: null,\n          results: null,\n        } as Error;\n      }\n    });\n};\n\nexport default getCities;\n","import React from 'react';\nimport { Text } from '@chakra-ui/react';\n\nconst TextHeader: React.FC = (Props) => {\n  return (\n    <>\n      <Text textStyle=\"h1\">Compare your Air</Text>\n      <Text paddingTop=\"40px\" id=\"header\" paddingBottom=\"5px\">\n        Compare the air quality between cities in the UK.\n      </Text>\n      <Text>Select cities to compare using the search tool below.</Text>\n    </>\n  );\n};\n\nexport default TextHeader;\n","import React from 'react';\nimport { CUIAutoComplete } from 'chakra-ui-autocomplete';\nimport { City } from '../../types/City';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport {\n  InputGroup,\n  InputLeftElement,\n  Input,\n  Box,\n  Flex,\n} from '@chakra-ui/react';\n\ninterface Props {\n  label: string;\n  placeholder: string;\n  itemsList: City[];\n  selectedItems: City[];\n  handleSelectedItemsChange(selectedItems?: City[]): any;\n}\n\nconst AutoComplete: React.FC<Props> = ({\n  label,\n  placeholder,\n  itemsList,\n  handleSelectedItemsChange,\n  selectedItems,\n}) => {\n  const [pickerItems, setPickerItems] = React.useState(itemsList);\n\n  return (\n    <Flex\n      width=\"100%\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      color=\"#000000\"\n    >\n      <CUIAutoComplete\n        label={label}\n        placeholder={placeholder}\n        items={pickerItems}\n        disableCreateItem={true}\n        selectedItems={selectedItems}\n        onSelectedItemsChange={(changes) =>\n          handleSelectedItemsChange(changes.selectedItems)\n        }\n        hideToggleButton={true}\n        renderCustomInput={(inputProps) => (\n          <Box width=\"100%\">\n            <InputGroup rounded=\"md\" color=\"#000000\">\n              <InputLeftElement\n                pointerEvents=\"none\"\n                children={<SearchIcon color=\"gray.300\" />}\n              />\n              <Input {...inputProps} width=\"100%\" borderColor=\"gray.300\" />\n            </InputGroup>\n          </Box>\n        )}\n        listStyleProps={{ overflow: 'auto', rounded: 'md' }}\n      />\n    </Flex>\n  );\n};\n\nexport default AutoComplete;\n","import request from './request';\nimport { AirQuality, Error } from '../types/AirQuality';\n\nconst getAirQualityByCity = async (\n  cities: string\n): Promise<AirQuality | Error | undefined> => {\n  console.log('cities', cities)\n  const airValueURL: string = `/latest?limit=100&page=1&offset=0&sort=asc&radius=10&country_id=GB${cities}&order_by=lastUpdated&dumpRaw=false`;\n\n  return await request('GET', airValueURL, {})\n    .then((response) => {\n      return response.data as AirQuality;\n    })\n    .catch((error) => {\n      if (error) {\n        return {\n          error: true,\n          errorMsg: error.message,\n          meta: null,\n          results: null,\n        } as Error;\n      }\n    });\n};\n\nexport default getAirQualityByCity;\n","import React from 'react';\nimport { Alert, AlertIcon } from '@chakra-ui/react';\n\ninterface Props {\n  status: string;\n  description: string;\n}\n\nconst AlertDisplay: React.FC<Props> = ({ status, description }) => {\n  return (\n    <>\n      <Alert status=\"error\">\n        <AlertIcon />\n       {description}\n      </Alert>\n    </>\n  );\n};\n\nexport default AlertDisplay;\n","import React from 'react';\nimport { Text } from '@chakra-ui/react';\nimport moment from 'moment';\n\ninterface Props {\n  lastUpdated: string;\n}\n\nconst DateSinceLastUpdate: React.FC<Props> = ({ lastUpdated }) => {\n  const newDate = new Date(lastUpdated);\n  const differenceString = moment(newDate).fromNow();\n\n  return (\n    <Text\n      textTransform=\"uppercase\"\n      fontWeight=\"bold\"\n      fontSize={['14px', '14px']}\n      paddingBottom=\"3px\"\n    >\n      Updated {differenceString}\n    </Text>\n  );\n};\n\nexport default DateSinceLastUpdate;\n","import React from 'react';\nimport { Text } from '@chakra-ui/react';\nimport { Measurements } from '../../types/AirQuality';\n\ninterface Props {\n  measurements: Measurements[];\n}\n\nconst AirQualityReadings: React.FC<Props> = ({ measurements }) => {\n  const mesurementsList = () => {\n    let itemslist: string = '';\n    if (measurements && measurements.length > 0) {\n      measurements.map((item, i, arr) => {\n        itemslist = `${itemslist} ${item.parameter.toUpperCase()}: ${\n          item.value\n        }${i != arr.length - 1 ? ',' : ''}`;\n      });\n      return itemslist;\n    } else return '';\n  };\n\n  return (\n    <>\n      {measurements && measurements.length > 0 && (\n        <Text fontWeight=\"bold\" paddingBottom=\"3px\">\n          Values: {mesurementsList()}\n        </Text>\n      )}\n    </>\n  );\n};\n\nexport default AirQualityReadings;\n","import React from 'react';\nimport { Box, Text, Icon } from '@chakra-ui/react';\nimport { Location } from '../../types/AirQuality';\nimport DateSinceLastUpdate from './DateSinceLastUpdate';\nimport AirQualityReadings from './AirQualityReadings';\nimport { AiOutlineClose } from 'react-icons/ai';\n\n//picked first measurement for last updated as they all appear to\n//contain the same value\n// if different countries were being looked up, United Kingdom\n// would not be hardcoded.\n// as cities can have multiple locations, the cross only removes\n// that specific location\ninterface Props {\n  location: Location;\n  handleRemoveLocation(location?: string): any;\n}\n\nconst CityAirQuality: React.FC<Props> = ({\n  location,\n  handleRemoveLocation,\n}) => (\n  <Box\n    width=\"100%\"\n    rounded=\"md\"\n    backgroundColor=\"#ffffff\"\n    key={`${location.location}_box`}\n    padding=\"10px\"\n    alignItems=\"left\"\n    textAlign=\"left\"\n  >\n    <Box\n      width=\"100%\"\n      alignItems=\"right\"\n      textAlign=\"right\"\n      fontSize=\"30px\"\n      fontWeight=\"bold\"\n    >\n      <Icon\n        as={AiOutlineClose}\n        cursor=\"pointer\"\n        onClick={() => handleRemoveLocation(location.location)}\n      />\n    </Box>\n    <Box\n      with=\"100%\"\n      paddingLeft=\"15px\"\n      paddingRight=\"15px\"\n      paddingTop=\"5px\"\n      paddingBottom=\"15px\"\n    >\n      <DateSinceLastUpdate lastUpdated={location.measurements[0].lastUpdated} />\n      <Text\n        fontSize={['18px', '25px']}\n        color=\"#6a0dad\"\n        fontWeight=\"bold\"\n        paddingBottom=\"5px\"\n      >\n        {location.location}\n      </Text>\n      <Text fontSize={['14px', '18px']} color=\"#000000\" paddingBottom=\"3px\">\n        in {location.city}, United Kingdom\n      </Text>\n      <AirQualityReadings measurements={location.measurements} />\n    </Box>\n  </Box>\n);\n\nexport default CityAirQuality;\n","import React from 'react';\nimport { City } from '../../types/City';\nimport { Grid, Box, Spinner } from '@chakra-ui/react';\nimport { AirQuality, Error } from '../../types/AirQuality';\nimport getAirQualityByCity from '../../api/getAirQualityByCity';\nimport AlertDisplay from '../AlertDisplay';\nimport CityAirQuality from '../CityAirQuality';\n\ninterface Props {\n  selectedItems: City[];\n}\n\n// this component is a little long and if I had time\n// I would refactor\n\nconst ResultsLayout: React.FC<Props> = ({ selectedItems }) => {\n  const [allLocations, setAllLocations] = React.useState<\n    AirQuality | Error | undefined | null\n  >(null);\n  const [error, setError] = React.useState<boolean>(false);\n  const [loading, setLoading] = React.useState<boolean>(false);\n\n  const handleRemoveLocation = (location: string) => {\n    console.log('got here');\n    //delete from results array and replace\n    if (allLocations && allLocations.results) {\n      const resultsClone = [...allLocations.results];\n      const resultsArray = resultsClone.filter(function (obj) {\n        return obj.location !== location;\n      });\n\n      setAllLocations({ ...allLocations, results: resultsArray });\n    }\n  };\n\n  React.useEffect(() => {\n    if (selectedItems && selectedItems.length > 0) {\n      const cityList = () => {\n        const start: string = '&';\n        let city = '';\n        selectedItems.map((cityData) => {\n          city = `${city}city=${cityData.city}&`;\n        });\n        const cityConcact: string = `${start}${city}`;\n\n        return cityConcact;\n      };\n\n      const getLocationsByCity = async () => {\n        const allData: AirQuality | Error | undefined | null =\n          await getAirQualityByCity(cityList());\n        setAllLocations(allData);\n      };\n\n      setLoading(true);\n      getLocationsByCity();\n      setLoading(false);\n    }\n  }, [selectedItems]);\n\n  React.useEffect(() => {\n    if (allLocations) {\n      if (allLocations!.error) {\n        setError(true);\n      } else {\n        setError(false);\n      }\n    }\n  }, [allLocations]);\n  return (\n    <Box width=\"100%\">\n      {loading ? (\n        <Spinner />\n      ) : (\n        <>\n          {error ? (\n            <AlertDisplay\n              status=\"error\"\n              description=\"There was an error retrieving location data\"\n            />\n          ) : (\n            <Grid\n              templateColumns={['1fr', 'repeat(2, 1fr)']}\n              gap={6}\n              paddingTop=\"20px\"\n              width=\"100%\"\n            >\n              {allLocations &&\n                allLocations!.results! &&\n                allLocations.results.length > 0 && (\n                  <>\n                    {allLocations!.results!.map((location) => (\n                      <CityAirQuality\n                        location={location}\n                        handleRemoveLocation={handleRemoveLocation}\n                      />\n                    ))}\n                  </>\n                )}\n            </Grid>\n          )}\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default ResultsLayout;\n","import React from 'react';\nimport AutoComplete from '../../../components/AutoComplete';\nimport { City } from '../../../types/City';\nimport ResultsLayout from '../../../components/ResultsLayout';\n\ninterface Props {\n  label: string;\n  placeholder: string;\n  itemsList: City[];\n}\n\nconst SearchAndDisplay: React.FC<Props> = ({\n  label,\n  placeholder,\n  itemsList,\n}) => {\n  const [selectedItems, setSelectedItems] = React.useState<City[]>([]);\n\n  const handleSelectedItemsChange = (selectedItems?: City[]) => {\n    if (selectedItems) {\n      setSelectedItems(selectedItems);\n      console.log(selectedItems, 'selected items');\n    }\n  };\n\n  return (\n    <>\n      <AutoComplete\n        label={label}\n        placeholder={placeholder}\n        itemsList={itemsList}\n        handleSelectedItemsChange={handleSelectedItemsChange}\n        selectedItems={selectedItems}\n      />\n      <ResultsLayout selectedItems={selectedItems} />\n    </>\n  );\n};\n\nexport default SearchAndDisplay;\n","import React from 'react';\nimport PageContainer from '../../components/PageContainer';\nimport { Box, Spinner } from '@chakra-ui/react';\nimport { AllCities, Error, CitiesList } from '../../../src/types/Cities';\nimport { City } from '../../../src/types/City';\nimport getCities from '../../api/getCities';\nimport TextHeader from './TextHeader';\nimport SearchAndDisplay from './SearchAndDisplay';\nimport AlertDisplay from '../../components/AlertDisplay';\n\n// getting the city data in this manner and this overall component\n// needs refactoring as think I can write this better....\n// component is a little long for my liking\n\nconst HomeContainer: React.FC = (Props) => {\n  const [allCitiesData, setAllCitiesData] = React.useState<\n    AllCities | Error | undefined | null\n  >(null);\n  const [error, setError] = React.useState<boolean>(false);\n  const [loading, setLoading] = React.useState<boolean>(false);\n  const [cityList, setCityList] = React.useState<CitiesList | null>(null);\n\n  React.useEffect(() => {\n    const getCityList = async () => {\n      const allData: AllCities | Error | undefined | null = await getCities();\n      setAllCitiesData(allData);\n    };\n    if (!allCitiesData) {\n      setLoading(true);\n      getCityList();\n      setLoading(false);\n    }\n  }, []);\n\n  //especially this.\n  React.useEffect(() => {\n    if (allCitiesData) {\n      if (allCitiesData!.results) {\n        const cityArray: City[] = [];\n        allCitiesData!.results.map((city) => {\n          const cityObj = {\n            ...city,\n            label: city.city,\n            value: city.city,\n          };\n          cityArray.push(cityObj);\n        });\n        const cityUpdate: CitiesList = { cities: cityArray };\n        setCityList(cityUpdate);\n      }\n      if (allCitiesData!.error) {\n        setError(true);\n      }\n    }\n  }, [allCitiesData]);\n\n  return (\n    <PageContainer>\n      <Box width=\"100%\" height=\"100%\" textAlign=\"center\">\n        <TextHeader />\n        <Box\n          paddingTop=\"30px\"\n          paddingBottom=\"30px\"\n          color=\"#000000\"\n          fontSize=\"16px\"\n          width=\"100%\"\n        >\n          {loading ? (\n            <Spinner />\n          ) : (\n            <>\n              {error ? (\n                <AlertDisplay\n                  status=\"error\"\n                  description=\"There was an error retrieving cities data\"\n                />\n              ) : (\n                <>\n                  {cityList && cityList.cities.length > 0 && (\n                    <SearchAndDisplay\n                      label=\"\"\n                      placeholder=\"Enter city name...\"\n                      itemsList={cityList!.cities}\n                    />\n                  )}\n                </>\n              )}\n            </>\n          )}\n        </Box>\n      </Box>\n    </PageContainer>\n  );\n};\n\nexport default HomeContainer;\n","import React from 'react';\nimport HomeContainer from '../../containers/HomeContainer';\ninterface Props {}\n\nconst Home: React.FC<Props> = (Props) => {\n  return <HomeContainer />;\n};\n\nexport default Home;\n","import React from 'react';\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <>\n      <Home />\n    </>\n  );\n}\n\nexport default App;\n","import { extendTheme } from '@chakra-ui/react';\n\nconst overrides = {\n  styles: {\n    global: () => ({\n      'html, body': {\n        overflowX: 'hidden',\n        fontSize: ['18px', '25px'],\n        scrollBehavior: 'smooth',\n        color: '#FFFFFF'\n      },\n    }),\n  },\n  textStyles: {\n    h1: {\n      fontSize: ['30px', '40px'],\n      lineHeight: '100%',\n      fontWeight:\"bold\"\n    },\n    h2: {\n      fontSize: ['36px', '48px'],\n      fontWeight: 'semibold',\n      lineHeight: '110%',\n      letterSpacing: '-1%',\n    },\n  },\n  fonts: {\n    heading: 'Open Sans',\n    body: 'Open Sans',\n  },\n  colors: {\n    primary: '#FFFFFF',\n  },\n  space: {},\n  config: {\n    cssVarPrefix: 'air-quality',\n    initialColorMode: 'light',\n    useSystemColorMode: false,\n  },\n};\nexport default extendTheme(overrides);\n","import React, { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  };\n\n  public static getDerivedStateFromError(_: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('Uncaught error:', error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return <h1>Sorry.. there was an error that was weird!</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport theme from './theme';\nimport '@fontsource/open-sans/400.css';\nimport ErrorBoundary from '../src/components/ErrorBoundary';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <ErrorBoundary>\n        <App />\n      </ErrorBoundary>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}